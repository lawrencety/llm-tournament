#!/usr/bin/env python3
"""
Seed file for LLM Tournament database
Creates tournaments with user questions and agentic AI prompts
"""

from datetime import datetime, date, timedelta
from app import app, db
from models import Tournament, Prompt

def create_llm_tournaments():
    """Create LLM tournaments with user questions and agentic prompts"""
    
    with app.app_context():
        # Clear existing data
        print("Clearing existing data...")
        Prompt.query.delete()
        Tournament.query.delete()
        db.session.commit()
        
        # Create tournaments
        print("Creating tournaments...")
        
        # Tournament 1: Creative Writing
        creative_tournament = Tournament(
            name="Creative Writing Mastery",
            user_input="I want to improve my creative writing skills. Can you help me write better stories, develop characters, and create engaging plots?",
            start_date=date.today(),
            end_date=date.today() + timedelta(days=30)
        )
        db.session.add(creative_tournament)
        
        # Tournament 2: Code Review
        code_tournament = Tournament(
            name="Code Review Excellence",
            user_input="I need help reviewing and improving my code. Can you analyze my code for bugs, suggest optimizations, and recommend best practices?",
            start_date=date.today() + timedelta(days=7),
            end_date=date.today() + timedelta(days=37)
        )
        db.session.add(code_tournament)
        
        db.session.commit()
        
        # Create agentic prompts for Creative Writing tournament
        print("Creating Creative Writing prompts...")
        creative_prompts = [
            "You are a master storyteller. Analyze the given story and provide detailed feedback on character development, plot structure, pacing, dialogue, and narrative voice. Focus on specific improvements that will make the story more engaging and emotionally resonant.",
            "Act as a creative writing mentor. Review the provided text and identify areas where the author can strengthen their prose through better word choice, sentence variety, and literary devices. Provide specific examples of how to improve each identified weakness.",
            "You are a professional editor specializing in fiction. Examine the story for plot holes, inconsistencies, and areas where the narrative could be tightened. Suggest specific revisions that will improve the overall flow and coherence of the story.",
            "As a character development expert, analyze the characters in the given story. Evaluate their motivations, depth, dialogue, and growth throughout the narrative. Provide specific suggestions for making them more three-dimensional and relatable.",
            "You are a dialogue specialist. Review the conversation in the provided text and assess its authenticity, pacing, and contribution to character development. Suggest improvements to make the dialogue more natural and impactful.",
            "Act as a world-building consultant. Examine the setting and atmosphere of the story, evaluating how well the environment supports the narrative and characters. Provide suggestions for enhancing the world-building elements.",
            "You are a genre expert. Analyze how well the story fits its intended genre and identify opportunities to strengthen genre-specific elements. Provide specific recommendations for improving genre conventions and reader expectations.",
            "As a pacing specialist, review the story's rhythm and flow. Identify sections that feel rushed or dragged out, and suggest specific techniques to improve the overall pacing and reader engagement.",
            "You are a theme and symbolism expert. Analyze the deeper meanings and themes in the story, evaluating how effectively they're conveyed. Suggest ways to strengthen the thematic elements without being heavy-handed.",
            "Act as a voice and style consultant. Examine the author's unique voice and writing style, identifying strengths and areas for improvement. Provide specific suggestions for developing a more distinctive and compelling narrative voice.",
            "You are a conflict and tension specialist. Analyze the story's central conflicts and evaluate how effectively they drive the plot forward. Suggest specific ways to heighten tension and create more compelling obstacles for the characters.",
            "As a research and authenticity expert, review the story for accuracy in historical, cultural, or technical details. Identify areas where additional research could strengthen the story's credibility and immersion.",
            "You are a structure and organization specialist. Examine the story's overall structure, including chapter breaks, scene transitions, and narrative flow. Suggest improvements to create a more cohesive and engaging reading experience.",
            "Act as a reader engagement expert. Analyze how well the story hooks and maintains reader interest throughout. Identify specific moments where the narrative could be more compelling and suggest improvements.",
            "You are a dialogue and action balance specialist. Review how well the story balances dialogue, action, and narrative description. Suggest specific adjustments to create a more dynamic and engaging reading experience.",
            "As a subplot integration expert, analyze how well subplots are woven into the main narrative. Evaluate their relevance and contribution to the overall story, suggesting improvements for better integration.",
            "You are a emotional impact specialist. Examine how effectively the story creates emotional resonance with readers. Identify opportunities to strengthen emotional beats and character connections.",
            "Act as a technical writing consultant. Review the story for grammar, syntax, and technical writing issues that could distract from the narrative. Provide specific corrections and suggestions for improvement.",
            "You are a market and audience specialist. Analyze how well the story appeals to its target audience and fits current market trends. Suggest adjustments to improve commercial viability while maintaining artistic integrity.",
            "As a revision and editing expert, provide a comprehensive revision plan for the story. Prioritize the most important changes and suggest a systematic approach to improving the overall quality of the work.",
            "You are a creative inspiration specialist. Analyze the story's originality and creativity, identifying opportunities to make it more unique and memorable. Suggest specific ways to enhance the story's distinctive elements.",
            "Act as a reader feedback interpreter. Analyze the story from multiple reader perspectives, considering different tastes and expectations. Provide balanced feedback that addresses various potential reader concerns.",
            "You are a genre-blending expert. Evaluate how well the story combines different genres or literary elements. Suggest ways to create more effective genre fusion that enhances rather than confuses the narrative.",
            "As a cultural sensitivity consultant, review the story for potential cultural insensitivity or stereotyping. Suggest improvements to create more inclusive and respectful representation.",
            "You are a narrative perspective specialist. Analyze the chosen point of view and narrative perspective, evaluating how well it serves the story. Suggest alternatives or improvements to enhance the narrative effectiveness.",
            "Act as a plot twist and surprise expert. Review the story's use of plot twists and surprises, evaluating their effectiveness and believability. Suggest improvements to create more satisfying and unexpected developments.",
            "You are a descriptive writing specialist. Analyze the story's use of description and sensory details, evaluating how well they create vivid imagery. Suggest specific improvements to enhance the story's visual and emotional impact.",
            "As a character arc specialist, examine how well the main characters grow and change throughout the story. Identify opportunities to strengthen character development and create more satisfying character journeys.",
            "You are a conflict resolution expert. Analyze how the story's conflicts are resolved, evaluating the satisfaction and believability of the resolutions. Suggest improvements to create more satisfying and meaningful conclusions.",
            "Act as a literary device specialist. Review the story's use of literary devices like foreshadowing, symbolism, and metaphor. Suggest specific ways to enhance these elements for greater impact and meaning."
        ]
        
        # Create unique responses for each creative writing prompt
        creative_responses = [
            "As a master storyteller, I can see your narrative has solid bones but needs refinement. Your character development shows promise - the protagonist's motivations are clear and their internal conflict drives the plot forward. However, your pacing needs work; the story rushes through crucial emotional beats. The dialogue feels authentic but lacks subtext. Consider adding more 'show don't tell' moments, especially in the middle section where tension should build. Your world-building is adequate but could be more immersive through sensory details. The ending needs more emotional payoff - give readers the satisfaction they've earned by following this character's journey.",
            
            "Your prose demonstrates good technical skills but lacks the polish needed to truly shine. Your word choice is functional but not memorable - consider using more specific, vivid verbs instead of generic ones. Your sentence variety is limited, creating a monotonous rhythm that lulls readers. I notice you rely heavily on 'was' and 'were' constructions; try active voice more often. Your literary devices are sparse - metaphors and similes could add depth and beauty to your descriptions. The paragraph structure is solid but could use more variety in length and complexity. Focus on creating musical prose that sings rather than merely informs.",
            
            "I've identified several structural issues that need immediate attention. Your story has a significant plot hole in Chapter 3 where the protagonist's backstory contradicts their present actions - this needs clarification or revision. The timeline is inconsistent; events that should take days are compressed into hours. Your character consistency is problematic - the protagonist's personality shifts dramatically between scenes without explanation. The subplot involving the secondary character feels tacked on and doesn't serve the main narrative. Your transitions between scenes are jarring and break reader immersion. The story needs a thorough revision focusing on internal logic and narrative coherence.",
            
            "Your protagonist shows good potential but lacks the depth needed to carry the story. Their motivations are surface-level and don't drive their actions convincingly. The character's backstory is mentioned but never integrated into their present behavior. Their dialogue sounds generic rather than reflecting their unique personality and background. The character's growth arc is unclear - what do they learn or how do they change? Their relationships with other characters feel superficial and transactional. Consider creating a detailed character profile including their fears, desires, and internal conflicts. The protagonist needs more agency - they should drive the plot forward through their choices, not just react to events.",
            
            "Your dialogue has good bones but needs significant refinement to feel truly authentic. Each character's voice is too similar - they all sound like the same person with different names. The dialogue lacks subtext; characters say exactly what they mean, which feels unnatural. Your conversations don't advance the plot or reveal character effectively. The dialogue tags are repetitive and distracting - vary them or eliminate them where possible. Characters speak in complete, grammatically perfect sentences, which sounds stilted. Consider how people actually talk - with interruptions, half-thoughts, and emotional undertones. The dialogue needs more conflict and tension to keep readers engaged.",
            
            "Your world-building shows imagination but lacks the depth needed to feel lived-in. The setting feels like a backdrop rather than an active participant in the story. The rules of your world are inconsistent - magic or technology works differently in different scenes. The cultural details are superficial and don't affect how characters behave or think. The geography and history are mentioned but don't impact the plot meaningfully. Consider how the world's unique aspects create opportunities and obstacles for your characters. The setting should feel like a character itself, with its own personality and influence on the story. Your world needs more specific, concrete details that make it feel real and immersive.",
            
            "Your story attempts to blend multiple genres but doesn't successfully establish its primary genre identity. The tone shifts dramatically between scenes, confusing readers about what kind of story they're reading. The genre conventions are inconsistent - you introduce elements that don't fit the established genre rules. The pacing doesn't match genre expectations; romance readers expect different beats than thriller readers. Your character types don't align with genre conventions, making the story feel unfocused. Consider choosing one primary genre and following its established patterns more closely. The story needs clearer genre identity to attract the right readers and meet their expectations.",
            
            "Your story's pacing is uneven and disrupts reader engagement. The opening is too slow, taking too long to establish the central conflict. The middle section drags with unnecessary scenes that don't advance plot or character. The climax feels rushed and doesn't give readers time to process the emotional impact. Your scene transitions are abrupt, creating jarring shifts in momentum. The story lacks the ebb and flow needed to maintain reader interest. Consider cutting scenes that don't serve multiple purposes. The pacing should build tension gradually, with moments of relief before the next challenge. Your story needs better rhythm to keep readers turning pages.",
            
            "Your story touches on interesting themes but doesn't develop them with sufficient depth. The themes feel tacked on rather than organically integrated into the narrative. Your symbolism is heavy-handed and obvious rather than subtle and meaningful. The story lacks thematic coherence - different scenes suggest different messages. Your characters don't embody the themes through their actions and choices. The ending doesn't provide thematic resolution or insight. Consider what you want readers to think or feel after finishing your story. The themes should emerge naturally from character actions and plot events, not be explicitly stated. Your story needs stronger thematic foundation to give it lasting impact.",
            
            "Your narrative voice is inconsistent and doesn't establish a clear authorial personality. The tone shifts between formal and casual without purpose or pattern. Your sentence structure is monotonous, lacking the variety needed to create engaging prose. The voice doesn't match the story's genre or target audience. Your descriptions sound generic rather than reflecting a unique perspective. The narrative distance is inconsistent - sometimes too close, sometimes too far from the characters. Consider what kind of narrator would best serve your story. The voice should feel like a real person telling the story, not a machine generating words. Your story needs a distinctive voice that readers will remember.",
            
            "Your story lacks sufficient conflict to drive the plot forward and maintain reader interest. The protagonist faces obstacles that are too easily overcome, reducing tension. The stakes aren't high enough to make readers care about the outcome. The conflict feels external rather than internal, missing opportunities for character growth. Your story lacks the escalating tension needed to build to a satisfying climax. The antagonist is weak and doesn't provide meaningful opposition. Consider what your character wants most and what's preventing them from getting it. The conflict should force difficult choices that reveal character. Your story needs stronger obstacles and higher stakes to create compelling tension.",
            
            "Your story shows research gaps that undermine its credibility and immersion. The historical details are inaccurate for the time period you've chosen. The technical aspects of your character's profession are unrealistic and would be obvious to knowledgeable readers. The cultural references don't match the setting or time period. Your dialogue uses modern expressions that wouldn't exist in your chosen era. The social dynamics and relationships don't reflect the historical context accurately. Consider consulting experts or doing more thorough research on the specific aspects you're writing about. The story needs more authentic details to feel believable and immersive.",
            
            "Your story's structure is unclear and doesn't follow established narrative patterns effectively. The three-act structure is muddled, making it difficult for readers to follow the story's progression. Your chapter breaks don't create effective cliffhangers or natural stopping points. The story lacks clear turning points that signal major plot developments. Your scenes don't build logically toward the climax. The ending feels disconnected from the beginning, suggesting structural problems throughout. Consider outlining your story to ensure proper pacing and development. The structure should support your story's themes and character arcs. Your story needs clearer organization to guide readers through the narrative effectively.",
            
            "Your story struggles to maintain reader engagement throughout its length. The opening doesn't create a strong enough hook to draw readers in. The middle section sags with scenes that don't advance the plot or develop characters. The story lacks the emotional beats needed to keep readers invested. Your characters aren't compelling enough to carry the story on their own. The plot developments are predictable and don't surprise or delight readers. Consider what makes readers want to keep turning pages. The story needs stronger emotional hooks and more compelling character relationships. Your story needs to create a stronger connection with readers to maintain their interest.",
            
            "Your story suffers from an imbalance between dialogue, action, and narrative description. The dialogue scenes feel static and lack movement or visual interest. The action sequences are too brief and don't provide enough excitement or tension. The narrative description overwhelms the dialogue and action, slowing the pace. Your scenes don't effectively blend these elements to create dynamic storytelling. The dialogue doesn't advance the plot or reveal character effectively. Consider how to make each scene more visually interesting and engaging. The story needs better balance between talking, doing, and describing to maintain reader interest.",
            
            "Your subplots feel disconnected from the main story and don't serve the overall narrative effectively. The secondary characters' stories don't intersect meaningfully with the protagonist's journey. The subplots don't create additional tension or complications for the main plot. Your story lacks the complexity needed to feel rich and layered. The subplots feel like separate stories rather than integrated elements. Consider how subplots can support and enhance the main story. The story needs better integration of all its elements to create a cohesive whole. Your subplots should feel necessary rather than optional.",
            
            "Your story lacks the emotional depth needed to create a lasting impact on readers. The emotional beats are too subtle or missing entirely, leaving readers disconnected from the characters. The story doesn't create the cathartic experience readers expect from good fiction. Your characters' emotions feel superficial rather than deeply felt. The story lacks the emotional journey needed to satisfy readers. Consider what emotions you want readers to experience and how to create them. The story needs stronger emotional hooks and more compelling character relationships. Your story needs to touch readers' hearts, not just their minds.",
            
            "Your story has several technical issues that distract from the narrative. The grammar and punctuation errors are frequent enough to disrupt reading flow. The sentence structure is often awkward and unclear. The paragraph breaks don't follow logical thought patterns. Your word choice is sometimes imprecise, leading to confusion. The formatting and presentation need attention. Consider having a professional editor review your work for technical issues. The story needs cleaner, more polished prose to let the narrative shine through. Your technical skills need improvement to support your creative vision.",
            
            "Your story doesn't clearly target a specific audience or market, making it difficult to position for publication. The tone and content don't match the expectations of your intended readership. The story length doesn't fit standard market categories. Your genre blending makes it hard to place in traditional publishing categories. The story lacks the commercial appeal needed to attract agents or publishers. Consider researching your target market and adjusting the story accordingly. The story needs clearer market positioning to succeed commercially. Your story needs to appeal to a specific audience rather than trying to please everyone.",
            
            "Your story needs a comprehensive revision strategy to reach its full potential. The current draft has good bones but requires significant restructuring and refinement. I recommend focusing on character development first, then plot structure, then prose quality. The story needs multiple passes to address different aspects effectively. Consider working with a developmental editor to identify the biggest issues. The revision process should be systematic rather than random. Your story needs a clear revision plan to improve efficiently. The current draft is a good foundation but needs substantial work to become publishable.",
            
            "Your story shows creativity but lacks the originality needed to stand out in a crowded market. The concept is interesting but feels derivative of other works in the genre. The characters and situations are too familiar to feel fresh or exciting. The story doesn't offer a unique perspective or voice that readers haven't seen before. Consider what makes your story different from others in the genre. The story needs more distinctive elements to capture readers' attention. Your creativity needs to be channeled into more original and compelling directions.",
            
            "Based on typical reader feedback patterns, your story will likely receive mixed reactions from different audience segments. Younger readers may find the pacing too slow, while older readers might appreciate the character development. The genre elements may confuse readers expecting a different type of story. The ending may satisfy some readers while disappointing others. Consider how to appeal to your target audience more effectively. The story needs to be more focused on a specific readership. Your story needs to better anticipate and address reader expectations and preferences.",
            
            "Your attempt to blend genres creates confusion rather than innovation. The different genre elements don't complement each other effectively. The tone shifts between genres are jarring and disrupt reader immersion. The story doesn't establish clear genre expectations for readers. The genre blending feels forced rather than organic to the story. Consider choosing one primary genre and using elements from others more subtly. The story needs better integration of different genre elements. Your genre blending needs to serve the story rather than distract from it.",
            
            "Your story contains elements that may be culturally insensitive or stereotypical. The representation of different cultures feels superficial and based on assumptions rather than research. The character descriptions rely on harmful stereotypes that could offend readers. The cultural details are inaccurate and don't reflect authentic experiences. Consider consulting with members of the communities you're writing about. The story needs more authentic and respectful cultural representation. Your story needs to avoid harmful stereotypes and embrace authentic diversity.",
            
            "Your chosen point of view doesn't serve the story effectively and limits your narrative options. The perspective creates distance between readers and characters when intimacy is needed. The voice doesn't match the story's tone or genre expectations. The narrative distance is inconsistent, confusing readers about whose story this is. Consider how a different perspective might better serve your story. The story needs a more effective narrative approach. Your point of view choice needs to enhance rather than hinder the storytelling.",
            
            "Your story lacks the plot twists and surprises needed to keep readers engaged and guessing. The plot developments are too predictable and don't create the 'wow' moments readers expect. The story doesn't subvert expectations in interesting ways. The twists feel forced rather than organic to the story. Consider how to add more unexpected developments that still feel inevitable in hindsight. The story needs more surprises to maintain reader interest. Your plot needs more twists and turns to create compelling suspense.",
            
            "Your descriptions are functional but lack the vividness needed to create strong imagery. The sensory details are sparse and don't help readers visualize the scenes. Your descriptions don't create atmosphere or mood effectively. The language is too generic to create memorable images. Consider using more specific, concrete details that appeal to the senses. The story needs more vivid descriptions to bring scenes to life. Your descriptive writing needs to be more engaging and immersive.",
            
            "Your protagonist's character arc is unclear and doesn't provide the growth readers expect. The character doesn't change significantly from beginning to end. The character's journey lacks the internal conflict needed to drive growth. The character's goals and obstacles don't create meaningful change. Consider what your character needs to learn or overcome. The story needs a clearer character arc to satisfy readers. Your protagonist needs to undergo significant growth throughout the story.",
            
            "Your story's conflict resolution is unsatisfying and doesn't provide the closure readers expect. The ending feels rushed and doesn't address all the story's questions. The resolution doesn't feel earned based on the character's journey. The story lacks the emotional payoff needed to satisfy readers. Consider how to create a more satisfying conclusion. The story needs better conflict resolution to provide closure. Your ending needs to feel inevitable yet surprising.",
            
            "Your story makes limited use of literary devices that could enhance its impact and meaning. The metaphors and similes are sparse and don't add depth to the narrative. The symbolism is heavy-handed rather than subtle and meaningful. The story lacks the literary richness that makes fiction memorable. Consider how literary devices can support your themes and character development. The story needs more sophisticated use of literary techniques. Your prose needs more literary depth to create lasting impact."
        ]
        
        for i, prompt_text in enumerate(creative_prompts):
            prompt = Prompt(
                tournament_id=creative_tournament.id,
                prompt=prompt_text,
                result=creative_responses[i] if i < len(creative_responses) else "This story shows potential but needs significant revision to reach its full potential. Focus on strengthening character development, tightening plot structure, and improving prose quality.",
                created_at=datetime.now(),
                updated_at=datetime.now()
            )
            db.session.add(prompt)
        
        # Create agentic prompts for Code Review tournament
        print("Creating Code Review prompts...")
        code_prompts = [
            "You are a senior software engineer conducting a comprehensive code review. Analyze the provided code for bugs, performance issues, security vulnerabilities, and adherence to best practices. Provide specific, actionable feedback with code examples for improvements.",
            "Act as a code quality specialist. Review the code for maintainability, readability, and scalability. Identify areas where the code could be refactored for better organization and suggest specific improvements with examples.",
            "You are a security expert performing a security audit. Examine the code for potential security vulnerabilities, including injection attacks, authentication issues, and data exposure risks. Provide specific recommendations for securing the code.",
            "As a performance optimization expert, analyze the code for performance bottlenecks and inefficiencies. Identify specific areas for optimization and provide detailed suggestions for improving execution speed and resource usage.",
            "You are a testing specialist. Review the code for testability and suggest comprehensive testing strategies. Identify areas that need better test coverage and provide specific recommendations for unit, integration, and end-to-end tests.",
            "Act as a documentation expert. Evaluate the code's documentation and comments, identifying areas where better documentation could improve maintainability. Suggest specific improvements for code documentation and API documentation.",
            "You are a design pattern consultant. Analyze the code for appropriate use of design patterns and architectural principles. Suggest specific improvements for better code organization and maintainability using established patterns.",
            "As a code style and formatting specialist, review the code for consistency in style, naming conventions, and formatting. Provide specific suggestions for improving code consistency and readability.",
            "You are a dependency management expert. Analyze the code's dependencies and suggest improvements for better dependency management, including version control and security updates.",
            "Act as a error handling specialist. Review the code's error handling and exception management. Identify areas where better error handling could improve robustness and suggest specific improvements.",
            "You are a memory management expert. Analyze the code for memory leaks, inefficient memory usage, and resource management issues. Provide specific recommendations for improving memory efficiency.",
            "As a concurrency and threading specialist, review the code for thread safety and concurrent programming best practices. Identify potential race conditions and suggest improvements for better concurrent execution.",
            "You are a API design consultant. Evaluate the code's API design and suggest improvements for better usability, consistency, and developer experience. Provide specific recommendations for API improvements.",
            "Act as a data structure and algorithm expert. Analyze the code's use of data structures and algorithms, suggesting more efficient alternatives where appropriate. Provide specific recommendations with performance considerations.",
            "You are a code complexity specialist. Review the code for cyclomatic complexity and suggest refactoring opportunities to reduce complexity and improve maintainability.",
            "As a integration and compatibility expert, analyze the code for integration issues and compatibility problems. Suggest improvements for better system integration and cross-platform compatibility.",
            "You are a logging and monitoring specialist. Review the code's logging and monitoring capabilities, suggesting improvements for better observability and debugging.",
            "Act as a code reuse and modularity expert. Analyze the code for opportunities to improve reusability and modularity. Suggest specific refactoring approaches for better code organization.",
            "You are a version control and collaboration specialist. Review the code for version control best practices and suggest improvements for better team collaboration and code management.",
            "As a deployment and DevOps expert, analyze the code for deployment considerations and suggest improvements for better CI/CD integration and production readiness.",
            "You are a accessibility and usability specialist. Review the code for accessibility issues and suggest improvements for better user experience and inclusive design.",
            "Act as a internationalization and localization expert. Analyze the code for i18n/l10n considerations and suggest improvements for better global compatibility.",
            "You are a code metrics and quality gates specialist. Review the code against quality metrics and suggest improvements for better code quality and maintainability.",
            "As a legacy code modernization expert, analyze the code for modernization opportunities and suggest improvements for better technology adoption and future-proofing.",
            "You are a code review process specialist. Evaluate the code review process itself and suggest improvements for better code review practices and team collaboration.",
            "Act as a technical debt specialist. Analyze the code for technical debt and suggest prioritization strategies for addressing accumulated technical debt.",
            "You are a code standards and guidelines expert. Review the code against established standards and suggest improvements for better compliance and consistency.",
            "As a debugging and troubleshooting specialist. Analyze the code for debugging challenges and suggest improvements for better error diagnosis and problem resolution.",
            "You are a code evolution and refactoring specialist. Review the code for refactoring opportunities and suggest a systematic approach to improving code quality over time.",
            "Act as a code review automation expert. Analyze opportunities for automating code review processes and suggest tools and techniques for better automated quality assurance."
        ]
        
        # Create unique responses for each code review prompt
        code_responses = [
            "After conducting a comprehensive code review, I've identified several critical issues that need immediate attention. The most concerning is the SQL injection vulnerability in the user authentication module - you're using string concatenation instead of parameterized queries. This is a security risk that could lead to data breaches. Additionally, the error handling is insufficient and could leak sensitive information in production. Performance-wise, there's a classic N+1 query problem in the user data fetching loop that will cause significant slowdowns as the user base grows. I recommend implementing eager loading or batch queries. The code also lacks proper input validation and sanitization, which could lead to various security vulnerabilities.",
            
            "This codebase shows good architectural thinking but needs significant improvements in maintainability and readability. The functions are too long and violate the single responsibility principle - I found several functions exceeding 50 lines that should be broken down. There's inconsistent error handling throughout the codebase, with some functions throwing exceptions while others return null values. The variable naming could be more descriptive - avoid abbreviations like 'usr' for 'user' and 'ctx' for 'context'. The code lacks comprehensive unit tests, with only 30% coverage. I recommend implementing a proper testing strategy with unit tests, integration tests, and end-to-end tests. Consider using dependency injection to improve testability.",
            
            "This code has multiple security vulnerabilities that pose significant risks. The authentication mechanism is weak and vulnerable to brute force attacks - there's no rate limiting or account lockout after failed attempts. The password hashing is using MD5, which is cryptographically broken. Implement bcrypt with proper salt rounds (minimum 12). There are potential XSS vulnerabilities in the user input rendering - always sanitize and escape user data before displaying it. The session management is insecure, using predictable session IDs. Consider implementing OAuth 2.0 or JWT tokens with proper expiration. The API endpoints lack proper authorization checks, allowing unauthorized access to sensitive data. Implement proper access control and input validation.",
            
            "The performance bottlenecks in this code will become critical as the application scales. The database queries are inefficient and missing proper indexing - I found several queries that could benefit from composite indexes. The memory usage is excessive due to loading entire datasets into memory instead of using pagination or streaming. Consider implementing Redis caching for frequently accessed data. The algorithm complexity is O(n²) in several places where it could be O(n log n) with proper data structures like hash maps. The image processing is synchronous and blocking - implement async processing with queues. The API responses are too large and include unnecessary data - implement field selection and pagination. Consider using CDN for static assets and implementing proper compression.",
            
            "The current testing strategy is inadequate and doesn't provide sufficient confidence in the codebase. Test coverage is only 25%, with critical business logic untested. The existing tests are brittle and tightly coupled to implementation details. Implement comprehensive unit tests with proper mocking for external dependencies. The integration tests are missing database transactions, causing test pollution. Create proper test fixtures and factories for consistent test data. The end-to-end tests are flaky due to timing issues - implement proper wait strategies. Consider using property-based testing for complex algorithms. Add performance tests for critical paths and load testing for API endpoints. Implement test data builders and use dependency injection for better testability.",
            
            "The documentation is severely lacking and will hinder team productivity and onboarding. The API documentation is incomplete and outdated - implement OpenAPI/Swagger specifications with examples. The code comments are minimal and don't explain the business logic or complex algorithms. The README file is missing setup instructions and deployment guidelines. The architecture documentation is non-existent - create diagrams showing system components and data flow. Consider using tools like GitBook or Notion for comprehensive documentation. Add code examples for common use cases. The database schema documentation is missing - create ER diagrams and table descriptions. Implement automated documentation generation from code comments using tools like JSDoc or Sphinx.",
            
            "The code shows signs of tight coupling and low cohesion, making it difficult to test and maintain. The current architecture doesn't follow established design patterns effectively. I recommend implementing the Repository pattern for data access to abstract database operations. The Factory pattern would improve object creation, especially for complex entities. Consider using the Observer pattern for event handling and the Strategy pattern for different business rules. The code violates SOLID principles - the Single Responsibility Principle is broken in several classes. Implement dependency injection to reduce coupling. The current inheritance hierarchy is too deep - consider composition over inheritance. Use interfaces to define contracts and improve testability.",
            
            "The code style and formatting are inconsistent throughout the project, making it difficult to read and maintain. There's a mix of spaces and tabs for indentation, and line lengths vary significantly. The naming conventions are inconsistent - some variables use camelCase while others use snake_case. Implement a consistent coding standard using tools like Prettier for formatting and ESLint for style checking. Configure these tools in your CI/CD pipeline to enforce standards automatically. The import statements are disorganized - group them logically and remove unused imports. Consider using a code formatter that runs on save. Establish clear naming conventions for variables, functions, and classes. The code structure could be improved with better organization of files and modules.",
            
            "The dependency management needs immediate attention to address security vulnerabilities and maintainability issues. Several packages are outdated and have known security vulnerabilities - run 'npm audit' to identify critical issues. The package.json lacks proper version pinning, leading to inconsistent installs across environments. Implement a package-lock.json file to ensure reproducible builds. Some dependencies appear to be unused and should be removed to reduce bundle size and security surface. Consider using tools like depcheck to identify unused dependencies. The dependency tree is too deep with many transitive dependencies that could be simplified. Implement automated dependency scanning in your CI/CD pipeline. Consider using tools like Dependabot for automated security updates.",
            
            "The error handling is inadequate and inconsistent throughout the codebase, which will make debugging and maintenance difficult. The current approach of silent failures is dangerous and could hide critical issues. Many functions don't handle exceptions properly, leading to unhandled promise rejections. Implement proper error logging with structured logging and appropriate log levels. The error messages are not user-friendly and sometimes expose sensitive information. Consider implementing circuit breakers for external service calls to prevent cascading failures. Create custom error classes for different types of errors. The error handling should be consistent across all layers of the application. Implement proper error monitoring and alerting for production issues.",
            
            "The code has several memory management issues that could lead to memory leaks and performance degradation. There are potential memory leaks in event listeners and timers that aren't properly cleaned up. The component unmounting doesn't clear intervals and timeouts, causing memory leaks. The garbage collection could be optimized by avoiding circular references and large object retention. Consider using WeakMap and WeakSet for object references that should be garbage collected. The image processing loads entire images into memory - implement streaming for large files. Use memory profiling tools to identify and fix memory issues. Implement proper resource disposal patterns and cleanup in finally blocks. Consider using object pooling for frequently created and destroyed objects.",
            
            "The code has potential race conditions and threading issues that could lead to data corruption and unpredictable behavior. The shared state access isn't properly synchronized, creating race conditions in multi-threaded environments. The current implementation uses global variables that could be modified concurrently. Implement proper synchronization mechanisms like locks, semaphores, or atomic operations. Consider using thread-safe data structures and immutable objects where possible. The database transactions aren't properly isolated, leading to potential data inconsistencies. Implement proper transaction management with appropriate isolation levels. The async/await patterns aren't used consistently, leading to potential deadlocks. Consider using proper concurrency control patterns and avoid shared mutable state.",
            
            "The API design needs significant improvement to meet industry standards and provide better developer experience. The REST endpoints don't follow RESTful conventions consistently - some use POST for data retrieval. The HTTP status codes are incorrect in several places, returning 200 for error conditions. The API versioning strategy is unclear and inconsistent. Implement proper API versioning using URL paths or headers. The request/response validation is missing, allowing invalid data to be processed. Consider using OpenAPI specifications with proper validation schemas. The API responses are inconsistent in structure and format. Implement proper error response formats with error codes and messages. Add rate limiting and proper authentication mechanisms. Consider implementing API documentation with interactive examples.",
            
            "The data structures and algorithms used are inefficient and don't scale well with increased data volume. The current implementation uses arrays for lookups that should use hash maps for O(1) access. The sorting algorithm is O(n²) where it could be O(n log n) with proper implementation. The search operations are linear when they could be logarithmic with binary search. Consider using more appropriate data structures like sets for unique values and maps for key-value pairs. The caching strategy is naive and doesn't consider cache eviction policies. Implement proper caching with LRU or LFU eviction strategies. The data processing algorithms could be optimized using parallel processing. Consider using streams for large data processing instead of loading everything into memory.",
            
            "The code complexity is too high and exceeds recommended thresholds, making it difficult to understand and maintain. The cyclomatic complexity is above 10 in several functions, indicating they're too complex. The functions are too long and do too many things, violating the single responsibility principle. The nested conditionals create deep indentation levels that are hard to follow. Consider breaking down complex functions into smaller, more manageable pieces. Use the Strategy pattern for complex conditional logic. The code would benefit from better abstraction and separation of concerns. Implement proper design patterns to reduce complexity. Consider using functional programming concepts to simplify the code. The current architecture makes it difficult to test and modify individual components.",
            
            "The code has several integration and compatibility issues that make it difficult to deploy and maintain across different environments. The hardcoded dependencies make it difficult to test and deploy in different environments. The current implementation is tightly coupled to specific frameworks and libraries. Consider using dependency injection and configuration management. The database connections are hardcoded and don't support different environments. Implement proper environment configuration with different settings for development, staging, and production. The API integrations don't handle different response formats or error conditions properly. Consider using adapters and interfaces for external service integrations. The code doesn't follow platform-specific conventions and could have compatibility issues. Implement proper error handling and fallback mechanisms for integration failures.",
            
            "The logging and monitoring capabilities are insufficient for production deployment and debugging. The current logging is basic and doesn't provide enough context for debugging issues. The log messages are inconsistent and don't follow a structured format. Implement structured logging with correlation IDs to track requests across services. The error logging doesn't include stack traces or relevant context. Add proper monitoring and alerting for critical errors and performance issues. Consider using distributed tracing for microservices to track requests across service boundaries. The log levels are not used appropriately - everything is logged as INFO. Implement proper log level management and filtering. The system needs better observability for production issues and performance monitoring.",
            
            "The code reusability and modularity need significant improvement to reduce duplication and improve maintainability. There's significant code duplication throughout the codebase, with similar logic repeated in multiple places. The current architecture makes it difficult to reuse components and functions. Consider extracting common functionality into reusable modules and utilities. The code lacks proper abstraction layers, making it difficult to change implementations. Implement proper module system with clear interfaces and contracts. The business logic is mixed with presentation logic, making it difficult to reuse. Consider implementing proper separation of concerns with different layers. Create shared libraries for common functionality and utilities. The current structure makes it difficult to test individual components in isolation.",
            
            "The version control and collaboration practices need improvement to ensure code quality and team productivity. The commit messages are not descriptive enough and don't follow conventional commit format. The branching strategy is unclear and leads to merge conflicts. Implement proper branching strategies like GitFlow or GitHub Flow. The code review process is inconsistent and doesn't catch critical issues. Consider using automated code analysis tools and pre-commit hooks. The current workflow doesn't enforce code quality standards. Implement proper CI/CD pipelines with automated testing and quality checks. The team needs training on effective code review practices and collaboration tools. Consider using tools like Husky for pre-commit hooks and conventional commits for better changelog generation.",
            
            "The deployment and DevOps considerations are missing, making the application difficult to deploy and maintain. The current deployment process is manual and error-prone, leading to inconsistent deployments. The infrastructure as code is not properly implemented, making it difficult to reproduce environments. Consider using tools like Terraform or CloudFormation for infrastructure management. The application doesn't have proper health checks or monitoring for production deployment. Implement automated deployment pipelines with proper rollback capabilities. The environment configuration is hardcoded and doesn't support different deployment targets. Consider using containerization with Docker and orchestration with Kubernetes. The application lacks proper logging and monitoring for production issues. Implement proper CI/CD pipelines with automated testing and deployment.",
            
            "The application doesn't follow accessibility guidelines and has usability issues that could exclude users with disabilities. The current implementation lacks proper ARIA labels and semantic HTML structure. The keyboard navigation is not implemented, making it difficult for users who can't use a mouse. The color contrast ratios don't meet WCAG guidelines, making text difficult to read. Consider implementing proper accessibility features like screen reader support and keyboard navigation. The user interface needs better error handling and user feedback mechanisms. Implement proper form validation with clear error messages. The application doesn't support different input methods and assistive technologies. Consider conducting accessibility audits and user testing with disabled users.",
            
            "The internationalization and localization are not properly implemented, limiting the application's global reach. The current code has hardcoded strings that make it difficult to support multiple languages. The date and number formatting is not locale-aware, causing confusion for international users. The text direction and layout don't support right-to-left languages. Consider implementing proper i18n/l10n frameworks like react-i18next or vue-i18n. The cultural differences in data presentation are not considered. Implement proper translation management systems and workflows. The application doesn't handle different character encodings and text input methods. Consider using proper locale detection and fallback mechanisms. The user interface needs to be designed with internationalization in mind from the beginning.",
            
            "The code quality assessment is currently subjective and doesn't provide objective measures of code health. The current code quality metrics are not tracked or monitored over time. Consider implementing automated code quality metrics using tools like SonarQube or CodeClimate. The code coverage is not measured or enforced, leading to insufficient testing. Set up proper quality gates in the CI/CD pipeline to prevent low-quality code from being merged. The technical debt is not tracked or managed systematically. Consider using tools like CodeScene or NDepend for technical debt analysis. The code complexity metrics are not monitored, leading to increasingly complex code. Implement proper quality thresholds and automated reporting. The team needs training on code quality best practices and metrics interpretation.",
            
            "The current codebase contains outdated patterns and technologies that need modernization to improve maintainability and performance. The legacy code uses deprecated APIs and libraries that are no longer supported. The architecture patterns are outdated and don't follow current best practices. Consider implementing a gradual modernization strategy with incremental improvements. The technical debt is accumulating and needs to be addressed systematically. Plan a migration strategy to modern frameworks and libraries. The codebase needs to be refactored to use current design patterns and architectural principles. Consider using tools like jscodeshift for automated code transformations. The team needs training on modern development practices and tools. Create a roadmap for modernization with clear milestones and success criteria.",
            
            "The current code review process is inconsistent and doesn't catch critical issues effectively. The review process lacks clear guidelines and checklists for reviewers. The review comments are often superficial and don't address architectural or design issues. Consider implementing proper code review guidelines and training for team members. The review process should include security, performance, and maintainability checks. The automated code analysis tools are not integrated into the review process. Consider using tools like GitHub's code scanning or GitLab's security scanning. The review process doesn't include proper testing and validation steps. Implement proper review workflows with required checks and approvals. The team needs training on effective code review practices and constructive feedback.",
            
            "The current codebase has accumulated significant technical debt that needs to be addressed systematically. The technical debt is not tracked or prioritized, leading to increasing maintenance costs. The code quality is deteriorating over time due to quick fixes and shortcuts. Consider implementing a systematic approach to technical debt reduction. Prioritize debt items based on impact and effort required. Use tools like SonarQube or CodeClimate to track technical debt metrics. The team needs to allocate time for technical debt reduction in each sprint. Consider using technical debt tracking tools and regular debt assessment meetings. The architecture needs to be refactored to reduce complexity and improve maintainability. Create a plan for gradual debt reduction with clear milestones and success criteria.",
            
            "The current codebase lacks consistent coding standards and guidelines, making it difficult to maintain and collaborate. The coding style is inconsistent across different parts of the codebase. The naming conventions are not standardized, leading to confusion and errors. Consider implementing and enforcing coding style guides using automated tools. The team needs training on best practices and coding standards. Use tools like Prettier for code formatting and ESLint for style checking. The code organization and structure are not consistent across modules. Consider using tools like Husky for pre-commit hooks to enforce standards. The documentation for coding guidelines is missing or outdated. Create comprehensive documentation for coding standards and best practices. The team needs regular code review sessions to ensure standards compliance.",
            
            "The current error handling and debugging capabilities make it difficult to diagnose and fix issues in production. The error messages are not descriptive enough and don't provide enough context for debugging. The logging is insufficient and doesn't include stack traces or relevant information. Consider implementing better error reporting and structured logging. The debugging tools and profilers are not being used effectively. The system needs better observability for production issues. Implement proper error monitoring and alerting systems. The error handling doesn't provide enough information for troubleshooting. Consider using tools like Sentry or Rollbar for error tracking. The team needs training on debugging techniques and tools. The application needs better instrumentation for performance monitoring and debugging.",
            
            "The current codebase is difficult to modify and extend due to poor architecture and design. The code is tightly coupled and has high cohesion, making changes risky and time-consuming. The current structure doesn't support future requirements and growth. Consider implementing proper refactoring techniques and strategies. The architecture needs to be more flexible and adaptable to changing requirements. Use automated refactoring tools where possible to reduce risk. The code needs to be restructured to support better modularity and reusability. Consider using design patterns and architectural principles to improve the codebase. The team needs training on refactoring techniques and best practices. Create a long-term evolution plan for the codebase with clear goals and milestones.",
            
            "The current manual code review process is time-consuming and inconsistent, leading to missed issues and delays. The review process relies heavily on human judgment, which is subjective and error-prone. Consider implementing automated code analysis and review tools. The review process doesn't scale well with team growth and codebase size. Use AI-powered code review assistants to improve review quality and consistency. The automated tools should be integrated into the development workflow. Consider using tools like GitHub's code scanning or SonarQube for automated analysis. The review process should focus on high-value feedback rather than repetitive tasks. Implement proper review workflows with automated checks and approvals. The team needs training on effective use of automated review tools."
        ]
        
        for i, prompt_text in enumerate(code_prompts):
            prompt = Prompt(
                tournament_id=code_tournament.id,
                prompt=prompt_text,
                result=code_responses[i] if i < len(code_responses) else "This code requires significant improvements in multiple areas including security, performance, maintainability, and testing. Focus on implementing best practices and addressing technical debt systematically.",
                created_at=datetime.now(),
                updated_at=datetime.now()
            )
            db.session.add(prompt)
        
        # Commit all prompts
        db.session.commit()
        

        print(f"✅ Created 2 tournaments:")

if __name__ == "__main__":
    print("🌱 Starting database seeding...")
    create_llm_tournaments()
    print("🎉 Database seeding completed!")
